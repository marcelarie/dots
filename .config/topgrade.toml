[misc]
# Don't ask for confirmations
#assume_yes = true

# Disable specific steps - same options as the command line flag
# Available steps: ############################################################
# asdf, atom, bin, brew_cask, brew_formula, bun, cargo, chezmoi, chocolatey, choosenim,
# composer, conda, config_update, containers, custom_commands, deb_get, deno, distrobox,
# dotnet, emacs, firmware, flatpak, flutter, fossil, gcloud, gem, ghcup, git_repos,
# github_cli_extensions, gnome_shell_extensions, go, guix, haxelib, helix, helm, home_manager,
# jetpack, julia, juliaup, kakoune, krew, macports, mas, micro, myrepos, nix, node,
# opam, pacdef, pacstall, pearl, pip3, pipx, pkg, pkgin, pnpm, powershell, protonup,
# raco, rcm, remotes, restarts, rtcl, ruby_gems, rustup, scoop, sdkman, sheldon, shell,
# snap, sparkle, spicetify, stack, system, tldr, tlmgr, tmux, toolbx, vagrant, vcpkg,
# vim, winget, wsl, yadm, yarn
disable = ["nix", "system", "vim", "mas", "ruby_gems", "gem", "pip3"]
skip_notify = true

# Ignore failures for these steps
# ignore_failures = ["powershell"]

# Run specific steps - same options as the command line flag
#only = ["system", "emacs"]

# Do not ask to retry failed steps (default: false)
#no_retry = true

# Run inside tmux
#run_in_tmux = true

# List of remote machines with Topgrade installed on them
#remote_topgrades = ["toothless", "pi", "parnas"]

# Arguments to pass SSH when upgrading remote systems
#ssh_arguments = "-o ConnectTimeout=2"

# Path to Topgrade executable on remote machines
#remote_topgrade_path = ".cargo/bin/topgrade"

# Arguments to pass tmux when pulling Repositories
#tmux_arguments = "-S /var/tmux.sock"

# Do not set the terminal title
#set_title = false

# Display the time in step titles
# display_time = true

# Cleanup temporary or old files
#cleanup = true

[git]
#max_concurrency = 5
# Additional git repositories to pull
#repos = [
#    "~/src/*/",
#    "~/.config/something"
#]

# Don't pull the predefined git repos
#pull_predefined = false

# Arguments to pass Git when pulling Repositories
#arguments = "--rebase --autostash"

[composer]
#self_update = true

# Commands to run before anything
[pre_commands]
#"Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"

# Custom commands
[commands]
# "Nix flake update and rebuild" = "echo 'Nix update'; nix flake update ~/.nixpkgs && echo 'Nix rebuild'; sudo darwin-rebuild switch --flake ~/.nixpkgs#"
"Custom pip3" = "python3 -m pip install --upgrade pip"
"Wezterm nightly update" = "brew upgrade --cask wezterm-nightly --no-quarantine --greedy-latest"
"Neovim nightly update" = "/Users/m.manzanares/scripts/install-last-neovim.sh"
"Generate Brewfile" = "brew bundle dump --force --file=/Users/m.manzanares/Brewfile"
"Generate Cargofile" = "ls ~/.cargo/bin > ~/Cargofile"
"Generate Clones File Structure" = "tree -L 2 clones > clones-file-structure.md"
"Generate dot files fetch" = "echo '```' > README.md; ./scripts/onefetch-clean-outuput.sh >> README.md; echo '```' >> README.md"
# "Generate cargo-programs file" = "cat /Users/m.manzanares/.crates2.json | jq -r '.installs | keys[] | split(" ")[0]' | sed '/^$/d' > .cargo-programs"

[brew]
# greedy_cask = true
# autoremove = true

[linux]
# Arch Package Manager to use. Allowed values: autodetect, trizen, paru, yay, pikaur, pacman.
#arch_package_manager = "pacman"
# Arguments to pass yay (or paru) when updating packages
#yay_arguments = "--nodevel"
#show_arch_news = true
#trizen_arguments = "--devel"
#pikaur_arguments = ""
#enable_tlmgr = true
#emerge_sync_flags = "-q"
#emerge_update_flags = "-uDNa --with-bdeps=y world"
#redhat_distro_sync = false
#rpm_ostree = false

[windows]
# Manually select Windows updates
#accept_all_updates = false
#open_remotes_in_new_terminal = true

# Causes Topgrade to rename itself during the run to allow package managers
# to upgrade it. Use this only if you installed Topgrade by using a package
# manager such as Scoop to Cargo
#self_rename = true

[npm]
# Use sudo if the NPM directory isn't owned by the current user
#use_sudo = true

[firmware]
# Offer to update firmware; if false just check for and display available updates
#upgrade = true

[flatpak]
# Use sudo for updating the system-wide installation
#use_sudo = true
